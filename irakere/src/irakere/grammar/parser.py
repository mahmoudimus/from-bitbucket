'''
Generated by Irakere 0.2

grammar G

unit(Grammar) :
		GRAMMAR ID:name <__list__0>:rules
	|	GRAMMAR ID:name
	|	<__list__0>:rules
	|	

__list__0(List) :
		<rule>:item <__list__0>:list
	|	<rule>:item

rule(Rule) :
		ID:name LPAR ID:ast_name RPAR COLON <alts>:alts SEMI
	|	ID:name COLON <alts>:alts SEMI

__list__1(List) :
		OR <alt>:item <__list__1>:list
	|	OR <alt>:item

alts(List) :
		<alt>:item <__list__1>:list
	|	<alt>:item

__list__2(List) :
		<alt_elem>:item <__list__2>:list
	|	<alt_elem>:item

alt(Alt) :
		<__list__2>:elems
	|	

alt_elem :
		<ListElem => <alt_elem>:base TIMES:count>
	|	<ListElem => <alt_elem>:base GUESS:count>
	|	<ListElem => <alt_elem>:base PLUS:count>
	|	<FieldElem => <alt_elem>:base COLON ID:field_id>
	|	<basic_alt_elem>

basic_alt_elem :
		<SubRule => LPAR <alts>:alts RPAR>
	|	<InlineSymbol => ID:name IMPL <alt>:alt>
	|	<Symbol => ID:name>
	|	<Symbol => STRING:name>
'''


#--- header start ---


# Reserved words
reserved = [
    'GRAMMAR', 'IMPORT', 'AS', 'EPS'
    ]

tokens = reserved + [
    #Literals
    'ID', 'STRING', 'OR', 'IMPL', 
    'TIMES', 'PLUS', 'EQUALS', 'SEMI', 'MINUS', 'COLON', 'LPAR', 
    'RPAR', 'GUESS'
    ]

# Completely ignored characters
t_ignore = ' \t\x0c'

# Newlines
def t_NEWLINE(t):
    r'\n+'
    t.lexer.lineno += t.value.count("\n")
    
# Operators
t_PLUS = r'\+'
t_MINUS = r'-'
t_TIMES = r'\*'
t_OR = r'\|'
t_IMPL = r'=>'

t_EQUALS = r'='

t_SEMI = r';'
t_COLON = r':'
t_LPAR = '\('
t_RPAR = '\)'
t_GUESS = '\?'


# Identifiers and reserved words
reserved_map = { }
for r in reserved:
    reserved_map[r.lower()] = r

def t_ID(t):
    r'[A-Za-z_][\w_]*'
    t.type = reserved_map.get(t.value,"ID")
    return t

# String literal
t_STRING = r'\"([^\\\n]|(\\.))*?\"'


# Comments
def t_comment(t):
    r'\#(.)*?\n'
    t.lexer.lineno += t.value.count('\n')

def t_error(t):
    #t.lexer.skip(1)
    raise Exception("Illegal character %s" % repr(t.value[0]))

#--- header end ---


def p_unit_0(p):
	'''
	unit : GRAMMAR ID __list__0
	
	'''
	p[0] = create_ast('Grammar', name=p[2], rules=p[3])

def p_unit_1(p):
	'''
	unit : GRAMMAR ID
	
	'''
	p[0] = create_ast('Grammar', name=p[2])

def p_unit_2(p):
	'''
	unit : __list__0
	
	'''
	p[0] = create_ast('Grammar', rules=p[1])

def p_unit_3(p):
	'''
	unit : 
	
	'''
	p[0] = create_ast('Grammar')

def p___list__0_4(p):
	'''
	__list__0 : rule __list__0
	
	'''
	p[0] = create_ast('List', item=p[1], list=p[2])

def p___list__0_5(p):
	'''
	__list__0 : rule
	
	'''
	p[0] = create_ast('List', item=p[1])

def p_rule_6(p):
	'''
	rule : ID LPAR ID RPAR COLON alts SEMI
	
	'''
	p[0] = create_ast('Rule', name=p[1], ast_name=p[3], alts=p[6])

def p_rule_7(p):
	'''
	rule : ID COLON alts SEMI
	
	'''
	p[0] = create_ast('Rule', name=p[1], alts=p[3])

def p___list__1_8(p):
	'''
	__list__1 : OR alt __list__1
	
	'''
	p[0] = create_ast('List', item=p[2], list=p[3])

def p___list__1_9(p):
	'''
	__list__1 : OR alt
	
	'''
	p[0] = create_ast('List', item=p[2])

def p_alts_10(p):
	'''
	alts : alt __list__1
	
	'''
	p[0] = create_ast('List', item=p[1], list=p[2])

def p_alts_11(p):
	'''
	alts : alt
	
	'''
	p[0] = create_ast('List', item=p[1])

def p___list__2_12(p):
	'''
	__list__2 : alt_elem __list__2
	
	'''
	p[0] = create_ast('List', item=p[1], list=p[2])

def p___list__2_13(p):
	'''
	__list__2 : alt_elem
	
	'''
	p[0] = create_ast('List', item=p[1])

def p_alt_14(p):
	'''
	alt : __list__2
	
	'''
	p[0] = create_ast('Alt', elems=p[1])

def p_alt_15(p):
	'''
	alt : 
	
	'''
	p[0] = create_ast('Alt')

def p_alt_elem_16(p):
	'''
	alt_elem : alt_elem TIMES
	
	'''
	p[0] = create_ast('ListElem', base=p[1], count=p[2])

def p_alt_elem_17(p):
	'''
	alt_elem : alt_elem GUESS
	
	'''
	p[0] = create_ast('ListElem', base=p[1], count=p[2])

def p_alt_elem_18(p):
	'''
	alt_elem : alt_elem PLUS
	
	'''
	p[0] = create_ast('ListElem', base=p[1], count=p[2])

def p_alt_elem_19(p):
	'''
	alt_elem : alt_elem COLON ID
	
	'''
	p[0] = create_ast('FieldElem', base=p[1], field_id=p[3])

def p_alt_elem_20(p):
	'''
	alt_elem : basic_alt_elem
	
	'''
	p[0] = p[1]

def p_basic_alt_elem_21(p):
	'''
	basic_alt_elem : LPAR alts RPAR
	
	'''
	p[0] = create_ast('SubRule', alts=p[2])

def p_basic_alt_elem_22(p):
	'''
	basic_alt_elem : ID IMPL alt
	
	'''
	p[0] = create_ast('InlineSymbol', name=p[1], alt=p[3])

def p_basic_alt_elem_23(p):
	'''
	basic_alt_elem : ID
	
	'''
	p[0] = create_ast('Symbol', name=p[1])

def p_basic_alt_elem_24(p):
	'''
	basic_alt_elem : STRING
	
	'''
	p[0] = create_ast('Symbol', name=p[1])

#-- footer start ---
#--- footer end ---