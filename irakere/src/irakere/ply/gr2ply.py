'''
Created on Dec 11, 2009

@author: arian
'''
from irakere.text import *
from irakere.grammar import InlineSymbol, FieldElem, NonTerminal
import irakere

class PlyParserGenerator(object):
    def __init__(self, grammar):
        self.grammar = grammar
        self.__id = 0
    
    def generate(self):
        c = code("'''", NL, "Generated by Irakere ", irakere.VERSION, NL)
        c+= str(NL + self.grammar)        
        c += "'''" + NL + NL
        c += NL + get("#--- header start ---", "#--- header end ---", NL) + NL + NL

        for rule in self.grammar:
            for alt in rule:
                c += self.generate_method(rule, alt) 
        
        c += NL + get("#-- footer start ---", "#--- footer end ---", NL)
        
        return c
    
    def generate_method(self, rule, alt):
        mdef = code(NL, "def p_", rule.name, "_", str(self.__id), "(p):")
        bnf = code("'''", NL, self.generate_bnf(rule, alt), NL, "'''")
        creation = self.generate_creation(rule.ast_name, alt)
        self.__id += 1
        return code(mdef, block(bnf, NL, creation))
    
    def generate_creation(self, ast_name, alt):
        
        creation = alt.get_creation(ast_name)
        
        if creation == 'ABSTRACT':
            return 'p[0] = p[1]'
                
        def generate_creation(creation):
            def param(field):
                name, value = field
                s = name + '='
                if isinstance(value, int):
                    s += 'p[' + str(value + 1) + ']'
                else:
                    s += generate_creation(value + 1)
                return s
            
            if creation.ast_name is None:
                return 'None'
            
            if len(creation) == 0:
                args = ""
            else:
                args = ", " + str(sep(*creation, generator=param, sepa=', '))
            
            return "create_ast('" + str(creation.ast_name) + "'" + args + ')'
        
        return 'p[0] = ' + generate_creation(creation)
    
    def generate_bnf(self, rule, alt):
        c = code(rule.name, " : ")
        
        def symbol_generator(symbol):
            if isinstance(symbol, InlineSymbol):
                return sep(*symbol.alt, generator=symbol_generator)
            if isinstance(symbol, FieldElem):
                return symbol_generator(symbol.base)
            return str(symbol.name)
        
        c = code(c, sep(*alt, generator=symbol_generator), NL)
        return c

    def write_to_file(self, file_path):
        import os.path as path
        if path.exists(file_path):
            f = open(file_path, 'r')
            s = f.read()
            f.close()
        else:
            s = ''
        c = self.generate()
        s = c.to_str(old_text=s)
        f = open(file_path, 'w')
        f.write(s)