
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 12 00:43:16 EDT 2008
//----------------------------------------------------

package org.cocuyo.dsl.textgenerator;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 12 00:43:16 EDT 2008
  */
public class TextGeneratorGrammarCupParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TextGeneratorGrammarCupParser() {super();}

  /** Constructor which sets the default scanner. */
  public TextGeneratorGrammarCupParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TextGeneratorGrammarCupParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\004\000" +
    "\002\007\010\000\002\007\006\000\002\010\004\000\002" +
    "\010\002\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\007\000\002\013\006\000\002\014\011" +
    "\000\002\014\011\000\002\014\005\000\002\015\005\000" +
    "\002\015\003\000\002\015\002\000\002\016\003\000\002" +
    "\016\005\000\002\017\005\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\005\000\002\017\006" +
    "\000\002\017\004\000\002\017\004\000\002\017\005\000" +
    "\002\017\006\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\007\000\002\017\007\000" +
    "\002\020\011\000\002\020\007\000\002\021\005\000\002" +
    "\022\007\000\002\022\007\000\002\022\005\000\002\023" +
    "\003\000\002\023\004\000\002\024\011\000\002\024\013" +
    "\000\002\025\010\000\002\025\005\000\002\025\005\000" +
    "\002\026\003\000\002\027\005\000\002\027\003\000\002" +
    "\030\003\000\002\031\004\000\002\031\002\000\002\032" +
    "\005\000\002\032\003\000\002\033\003\000\002\034\005" +
    "\000\002\034\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\010\004\006\005\ufffe\006\ufffe\001\002\000" +
    "\006\005\017\006\021\001\002\000\004\002\015\001\002" +
    "\000\004\055\007\001\002\000\122\002\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\001\002\000" +
    "\006\005\uffff\006\uffff\001\002\000\030\002\uffba\005\uffba" +
    "\006\uffba\010\uffba\011\uffba\013\uffba\014\uffba\015\uffba\022" +
    "\uffba\042\uffba\055\uffba\001\002\000\030\002\uffbc\005\uffbc" +
    "\006\uffbc\010\uffbc\011\013\013\uffbc\014\uffbc\015\uffbc\022" +
    "\uffbc\042\uffbc\055\uffbc\001\002\000\004\055\007\001\002" +
    "\000\030\002\uffbb\005\uffbb\006\uffbb\010\uffbb\011\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\022\uffbb\042\uffbb\055\uffbb\001\002" +
    "\000\004\002\000\001\002\000\010\002\ufffa\005\ufffa\006" +
    "\ufffa\001\002\000\004\055\007\001\002\000\010\002\ufffc" +
    "\005\017\006\021\001\002\000\004\055\007\001\002\000" +
    "\010\002\ufffb\005\ufffb\006\ufffb\001\002\000\004\002\001" +
    "\001\002\000\014\007\034\010\ufff5\013\026\015\027\055" +
    "\007\001\002\000\012\010\ufff3\013\ufff3\015\ufff3\055\ufff3" +
    "\001\002\000\004\055\007\001\002\000\004\055\007\001" +
    "\002\000\006\011\047\021\046\001\002\000\012\010\ufff4" +
    "\013\ufff4\015\ufff4\055\ufff4\001\002\000\004\010\045\001" +
    "\002\000\012\010\ufff2\013\ufff2\015\ufff2\055\ufff2\001\002" +
    "\000\004\055\007\001\002\000\012\010\ufff5\013\026\015" +
    "\027\055\007\001\002\000\004\010\ufff6\001\002\000\016" +
    "\010\uffbd\013\uffbd\015\uffbd\022\043\042\uffbd\055\uffbd\001" +
    "\002\000\012\010\ufff5\013\026\015\027\055\007\001\002" +
    "\000\004\010\042\001\002\000\010\002\ufff8\005\ufff8\006" +
    "\ufff8\001\002\000\004\055\007\001\002\000\014\010\uffbe" +
    "\013\uffbe\015\uffbe\042\uffbe\055\uffbe\001\002\000\010\002" +
    "\ufff7\005\ufff7\006\ufff7\001\002\000\042\023\053\025\065" +
    "\026\060\027\075\030\073\032\064\033\066\034\061\035" +
    "\067\036\071\037\056\041\072\043\076\046\063\052\074" +
    "\055\007\001\002\000\004\055\007\001\002\000\004\012" +
    "\051\001\002\000\004\055\007\001\002\000\012\010\ufff1" +
    "\013\ufff1\015\ufff1\055\ufff1\001\002\000\044\023\053\024" +
    "\uffbf\025\065\026\060\027\075\030\073\032\064\033\066" +
    "\034\061\035\067\036\071\037\056\041\072\043\076\046" +
    "\063\052\074\055\007\001\002\000\076\010\uffe6\011\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\017\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\052\uffe6" +
    "\053\uffe6\055\uffe6\001\002\000\076\010\uffd5\011\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\017\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\043\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\052\uffd5\053" +
    "\uffd5\055\uffd5\001\002\000\044\023\053\025\065\026\060" +
    "\027\075\030\073\032\064\033\066\034\061\035\067\036" +
    "\071\037\056\040\uffbf\041\072\043\076\046\063\052\074" +
    "\055\007\001\002\000\014\010\uffed\011\107\013\uffed\015" +
    "\uffed\055\uffed\001\002\000\076\010\uffe4\011\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4\053\uffe4" +
    "\055\uffe4\001\002\000\076\010\uffd9\011\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\017\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\052\uffd9\053\uffd9\055" +
    "\uffd9\001\002\000\076\010\uffd6\011\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\017\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\050\uffd6\052\uffd6\053\uffd6\055\uffd6" +
    "\001\002\000\044\023\053\025\065\026\060\027\075\030" +
    "\073\032\064\033\066\034\061\035\067\036\071\037\056" +
    "\041\072\043\076\046\063\051\157\052\074\055\007\001" +
    "\002\000\076\010\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\017\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027" +
    "\uffdb\030\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\050\uffdb\052\uffdb\053\uffdb\055\uffdb\001\002" +
    "\000\076\010\uffe5\011\uffe5\013\uffe5\014\uffe5\015\uffe5\017" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\052\uffe5\053\uffe5\055\uffe5\001\002\000" +
    "\076\010\uffda\011\uffda\013\uffda\014\uffda\015\uffda\017\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda" +
    "\040\uffda\041\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\050\uffda\052\uffda\053\uffda\055\uffda\001\002\000\076" +
    "\010\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\052\uffd8\053\uffd8\055\uffd8\001\002\000\104\010" +
    "\uffdd\011\uffdd\013\uffdd\014\uffdd\015\uffdd\016\114\017\uffdd" +
    "\021\154\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\037\uffdd\040\uffdd\041\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\052\uffdd\053\uffdd\054\113\055\uffdd" +
    "\001\002\000\076\010\uffd4\011\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\017\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\047\uffd4\050\uffd4\052\uffd4\053\uffd4\055\uffd4\001" +
    "\002\000\004\055\007\001\002\000\102\010\uffdc\011\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\114\017\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\052\uffdc\053\uffdc\054\113\055\uffdc\001\002\000\004\055" +
    "\007\001\002\000\044\010\uffbf\023\053\025\065\026\060" +
    "\027\075\030\073\032\064\033\066\034\061\035\067\036" +
    "\071\037\056\041\072\043\076\046\063\052\074\055\007" +
    "\001\002\000\044\023\053\025\065\026\060\027\075\030" +
    "\073\032\064\033\066\034\061\035\067\036\071\037\056" +
    "\041\072\043\076\044\uffbf\046\063\052\074\055\007\001" +
    "\002\000\072\010\uffbf\011\107\014\uffbf\017\uffbf\022\uffbf" +
    "\023\053\024\uffbf\025\065\026\060\027\075\030\073\032" +
    "\064\033\066\034\061\035\067\036\071\037\056\040\uffbf" +
    "\041\072\043\076\044\uffbf\045\uffbf\046\063\047\uffbf\050" +
    "\uffbf\052\074\053\uffbf\055\007\001\002\000\004\044\101" +
    "\001\002\000\046\010\uffbf\023\053\025\065\026\060\027" +
    "\075\030\073\032\064\033\066\034\061\035\067\036\071" +
    "\037\056\041\072\043\076\045\uffbf\046\063\052\074\055" +
    "\007\001\002\000\006\010\103\045\104\001\002\000\076" +
    "\010\uffd0\011\uffd0\013\uffd0\014\uffd0\015\uffd0\017\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\052\uffd0\053\uffd0\055\uffd0\001\002\000\044\010" +
    "\uffbf\023\053\025\065\026\060\027\075\030\073\032\064" +
    "\033\066\034\061\035\067\036\071\037\056\041\072\043" +
    "\076\046\063\052\074\055\007\001\002\000\004\010\106" +
    "\001\002\000\076\010\uffd1\011\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\017\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\043\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\047\uffd1\050\uffd1\052\uffd1\053\uffd1\055\uffd1\001" +
    "\002\000\004\055\007\001\002\000\030\010\uffc0\014\uffc0" +
    "\017\uffc0\022\uffc0\024\uffc0\040\uffc0\044\uffc0\045\uffc0\047" +
    "\uffc0\050\uffc0\053\uffc0\001\002\000\104\010\uffdf\011\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\016\114\017\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\112" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\050\uffdf\052\uffdf\053\uffdf\054\113\055\uffdf\001\002\000" +
    "\076\010\uffde\011\uffde\013\uffde\014\uffde\015\uffde\017\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\041\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047" +
    "\uffde\050\uffde\052\uffde\053\uffde\055\uffde\001\002\000\044" +
    "\010\uffbf\023\053\025\065\026\060\027\075\030\073\032" +
    "\064\033\066\034\061\035\067\036\071\037\056\041\072" +
    "\043\076\046\063\052\074\055\007\001\002\000\046\017" +
    "\uffbf\022\uffbf\023\053\025\065\026\060\027\075\030\073" +
    "\032\064\033\066\034\061\035\067\036\071\037\056\041" +
    "\072\043\076\046\063\052\074\055\007\001\002\000\076" +
    "\010\uffe2\011\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\052\uffe2\053\uffe2\055\uffe2\001\002\000\006\017" +
    "\uffc4\022\126\001\002\000\006\017\uffc2\022\uffc2\001\002" +
    "\000\004\017\122\001\002\000\006\017\uffc1\022\uffc1\001" +
    "\002\000\100\010\uffc6\011\uffc6\013\uffc6\014\uffc6\015\uffc6" +
    "\017\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\047\uffc6\050\uffc6\052\uffc6\053\uffc6\054\123\055\uffc6" +
    "\001\002\000\044\010\uffbf\023\053\025\065\026\060\027" +
    "\075\030\073\032\064\033\066\034\061\035\067\036\071" +
    "\037\056\041\072\043\076\046\063\052\074\055\007\001" +
    "\002\000\004\010\125\001\002\000\076\010\uffc7\011\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\017\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\052\uffc7" +
    "\053\uffc7\055\uffc7\001\002\000\046\017\uffbf\022\uffbf\023" +
    "\053\025\065\026\060\027\075\030\073\032\064\033\066" +
    "\034\061\035\067\036\071\037\056\041\072\043\076\046" +
    "\063\052\074\055\007\001\002\000\006\017\uffc3\022\uffc3" +
    "\001\002\000\004\010\131\001\002\000\076\010\uffc5\011" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\052" +
    "\uffc5\053\uffc5\055\uffc5\001\002\000\004\010\133\001\002" +
    "\000\076\010\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3\017" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\052\uffe3\053\uffe3\055\uffe3\001\002\000" +
    "\004\037\135\001\002\000\046\014\uffbf\023\053\025\065" +
    "\026\060\027\075\030\073\032\064\033\066\034\061\035" +
    "\067\036\071\037\056\041\072\043\076\046\063\052\074" +
    "\053\uffbf\055\007\001\002\000\006\014\140\053\137\001" +
    "\002\000\044\014\uffbf\023\053\025\065\026\060\027\075" +
    "\030\073\032\064\033\066\034\061\035\067\036\071\037" +
    "\056\041\072\043\076\046\063\052\074\055\007\001\002" +
    "\000\044\010\uffbf\023\053\025\065\026\060\027\075\030" +
    "\073\032\064\033\066\034\061\035\067\036\071\037\056" +
    "\041\072\043\076\046\063\052\074\055\007\001\002\000" +
    "\004\010\142\001\002\000\076\010\uffc9\011\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\017\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\026\uffc9\027\uffc9\030\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\052\uffc9\053\uffc9" +
    "\055\uffc9\001\002\000\004\014\144\001\002\000\044\010" +
    "\uffbf\023\053\025\065\026\060\027\075\030\073\032\064" +
    "\033\066\034\061\035\067\036\071\037\056\041\072\043" +
    "\076\046\063\052\074\055\007\001\002\000\004\010\146" +
    "\001\002\000\076\010\uffc8\011\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\017\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\043\uffc8\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\052\uffc8\053\uffc8\055\uffc8\001" +
    "\002\000\076\010\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\017\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\052\uffe0\053\uffe0\055\uffe0\001\002" +
    "\000\004\042\151\001\002\000\044\010\uffbf\023\053\025" +
    "\065\026\060\027\075\030\073\032\064\033\066\034\061" +
    "\035\067\036\071\037\056\041\072\043\076\046\063\052" +
    "\074\055\007\001\002\000\004\010\153\001\002\000\076" +
    "\010\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\050\uffd2\052\uffd2\053\uffd2\055\uffd2\001\002\000\042\023" +
    "\053\025\065\026\060\027\075\030\073\032\064\033\066" +
    "\034\061\035\067\036\071\037\056\041\072\043\076\046" +
    "\063\052\074\055\007\001\002\000\076\010\uffe1\011\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\017\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\032\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\052\uffe1" +
    "\053\uffe1\055\uffe1\001\002\000\076\010\uffd7\011\107\013" +
    "\uffd7\014\uffd7\015\uffd7\017\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\052\uffd7\053" +
    "\uffd7\055\uffd7\001\002\000\042\023\053\025\065\026\060" +
    "\027\075\030\073\032\064\033\066\034\061\035\067\036" +
    "\071\037\056\041\072\043\076\046\063\052\074\055\007" +
    "\001\002\000\006\011\107\014\uffcb\001\002\000\004\010" +
    "\171\001\002\000\004\014\163\001\002\000\050\010\uffbf" +
    "\023\053\025\065\026\060\027\075\030\073\032\064\033" +
    "\066\034\061\035\067\036\071\037\056\041\072\043\076" +
    "\046\063\047\uffbf\050\uffbf\052\074\055\007\001\002\000" +
    "\010\010\uffcc\047\165\050\166\001\002\000\044\010\uffbf" +
    "\023\053\025\065\026\060\027\075\030\073\032\064\033" +
    "\066\034\061\035\067\036\071\037\056\041\072\043\076" +
    "\046\063\052\074\055\007\001\002\000\044\023\053\025" +
    "\065\026\060\027\075\030\073\032\064\033\066\034\061" +
    "\035\067\036\071\037\056\041\072\043\076\046\063\051" +
    "\157\052\074\055\007\001\002\000\004\010\uffcd\001\002" +
    "\000\004\010\uffce\001\002\000\076\010\uffcf\011\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\017\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\052\uffcf\053" +
    "\uffcf\055\uffcf\001\002\000\006\011\107\014\uffca\001\002" +
    "\000\004\040\174\001\002\000\044\010\uffbf\023\053\025" +
    "\065\026\060\027\075\030\073\032\064\033\066\034\061" +
    "\035\067\036\071\037\056\041\072\043\076\046\063\052" +
    "\074\055\007\001\002\000\004\010\176\001\002\000\076" +
    "\010\uffd3\011\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\022" +
    "\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\052\uffd3\053\uffd3\055\uffd3\001\002\000\004\024" +
    "\200\001\002\000\076\010\uffe7\011\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\017\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\052\uffe7\053\uffe7\055\uffe7" +
    "\001\002\000\004\016\202\001\002\000\006\017\uffea\055" +
    "\007\001\002\000\010\017\uffe9\021\215\022\uffe9\001\002" +
    "\000\004\017\210\001\002\000\006\017\uffeb\022\206\001" +
    "\002\000\006\017\uffea\055\007\001\002\000\004\017\uffec" +
    "\001\002\000\046\010\uffbf\020\211\023\053\025\065\026" +
    "\060\027\075\030\073\032\064\033\066\034\061\035\067" +
    "\036\071\037\056\041\072\043\076\046\063\052\074\055" +
    "\007\001\002\000\004\055\007\001\002\000\004\010\213" +
    "\001\002\000\012\010\uffef\013\uffef\015\uffef\055\uffef\001" +
    "\002\000\012\010\uffee\013\uffee\015\uffee\055\uffee\001\002" +
    "\000\042\023\053\025\065\026\060\027\075\030\073\032" +
    "\064\033\066\034\061\035\067\036\071\037\056\041\072" +
    "\043\076\046\063\052\074\055\007\001\002\000\010\011" +
    "\107\017\uffe8\022\uffe8\001\002\000\004\014\220\001\002" +
    "\000\004\055\007\001\002\000\012\010\ufff0\013\ufff0\015" +
    "\ufff0\055\ufff0\001\002\000\004\002\ufffd\001\002\000\010" +
    "\002\ufff9\005\ufff9\006\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\002\004\003\003\001\001\000\012\004" +
    "\022\005\017\006\015\007\021\001\001\000\002\001\001" +
    "\000\010\033\007\034\011\035\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\033\222\034\011\035\010" +
    "\001\001\000\012\004\221\005\017\006\015\007\021\001" +
    "\001\000\004\035\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\010\031\011\034\012\030\013\032\014" +
    "\024\035\027\001\001\000\002\001\001\000\010\033\216" +
    "\034\011\035\010\001\001\000\004\035\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\032\037\033\036\034\011\035\010\001" +
    "\001\000\016\010\035\011\034\012\030\013\032\014\024" +
    "\035\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\010\040\011\034\012\030\013\032\014\024\035\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\032" +
    "\043\033\036\034\011\035\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\056\020\054\021\061\024" +
    "\053\035\067\001\001\000\004\035\047\001\001\000\002" +
    "\001\001\000\004\035\051\001\001\000\002\001\001\000" +
    "\016\017\076\020\054\021\061\024\053\031\176\035\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\076\020\054\021\061\024\053\031\172\035\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\017\157\020\054\021\061\022\160" +
    "\023\161\024\053\035\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\154\001\001\000\002\001\001\000\012\032\147\033" +
    "\036\034\011\035\010\001\001\000\004\025\146\001\001" +
    "\000\004\035\133\001\001\000\016\017\076\020\054\021" +
    "\061\024\053\031\131\035\067\001\001\000\016\017\076" +
    "\020\054\021\061\024\053\031\077\035\067\001\001\000" +
    "\016\017\076\020\054\021\061\024\053\031\107\035\067" +
    "\001\001\000\002\001\001\000\016\017\076\020\054\021" +
    "\061\024\053\031\101\035\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\076\020\054\021\061\024" +
    "\053\031\104\035\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\110\001\001\000\002\001\001\000" +
    "\004\025\114\001\001\000\002\001\001\000\016\017\076" +
    "\020\054\021\061\024\053\031\127\035\067\001\001\000" +
    "\024\017\076\020\054\021\061\024\053\026\117\027\115" +
    "\030\116\031\120\035\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\076\020\054\021" +
    "\061\024\053\031\123\035\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\076\020\054\021\061\024" +
    "\053\030\126\031\120\035\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\017\076\020\054" +
    "\021\061\024\053\031\135\035\067\001\001\000\002\001" +
    "\001\000\016\017\076\020\054\021\061\024\053\031\142" +
    "\035\067\001\001\000\016\017\076\020\054\021\061\024" +
    "\053\031\140\035\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\076\020\054\021" +
    "\061\024\053\031\144\035\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\076\020\054\021\061\024\053\031\151\035\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\017" +
    "\155\020\054\021\061\024\053\035\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\171\020\054\021" +
    "\061\024\053\035\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\076\020\054\021" +
    "\061\024\053\031\163\035\067\001\001\000\002\001\001" +
    "\000\016\017\076\020\054\021\061\024\053\031\167\035" +
    "\067\001\001\000\020\017\157\020\054\021\061\022\166" +
    "\023\161\024\053\035\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\076\020\054\021\061\024\053\031" +
    "\174\035\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\203\016\204\035\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\206\016" +
    "\204\035\202\001\001\000\002\001\001\000\016\017\076" +
    "\020\054\021\061\024\053\031\211\035\067\001\001\000" +
    "\010\033\213\034\011\035\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\215\020" +
    "\054\021\061\024\053\035\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TextGeneratorGrammarCupParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TextGeneratorGrammarCupParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TextGeneratorGrammarCupParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TextGeneratorGrammarCupParser$actions {
  private final TextGeneratorGrammarCupParser parser;

  /** Constructor */
  CUP$TextGeneratorGrammarCupParser$actions(TextGeneratorGrammarCupParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TextGeneratorGrammarCupParser$do_action(
    int                        CUP$TextGeneratorGrammarCupParser$act_num,
    java_cup.runtime.lr_parser CUP$TextGeneratorGrammarCupParser$parser,
    java.util.Stack            CUP$TextGeneratorGrammarCupParser$stack,
    int                        CUP$TextGeneratorGrammarCupParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TextGeneratorGrammarCupParser$result;

      /* select the action based on the action number */
      switch (CUP$TextGeneratorGrammarCupParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Id ::= ID 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Id",27, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NameIdList ::= Id 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("NameIdList",26, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NameIdList ::= NameIdList _PTO Id 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("NameIdList",26, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Name ::= NameIdList 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Name",25, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NameList ::= Name 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("NameList",24, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NameList ::= Name _COMMA NameList 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("NameList",24, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CodeList ::= 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("CodeList",23, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CodeList ::= Code CodeList 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("CodeList",23, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FuncCallArg ::= CodeList 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncCallArg",22, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FuncCallArgList ::= FuncCallArg 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncCallArgList",21, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FuncCallArgList ::= FuncCallArgList _COMMA FuncCallArg 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncCallArgList",21, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FuncCallArguments ::= FuncCallArgList 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncCallArguments",20, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FuncCallArgs ::= _DPTO CodeList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncCallArgs",19, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FuncCallArgs ::= _LPAR FuncCallArguments _RPAR 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncCallArgs",19, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FuncCallArgs ::= _LPAR FuncCallArguments _RPAR _DPTO CodeList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncCallArgs",19, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-5)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ForLoop ::= FOR Id IN CodeList SEP CodeList DO CodeList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("ForLoop",18, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-8)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ForLoop ::= FOR Id IN CodeList DO CodeList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("ForLoop",18, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-6)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Condition ::= NOT Code 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Condition",17, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Condition ::= Code 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Condition",17, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ConditionalPart ::= Condition DO CodeList 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("ConditionalPart",16, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ConditionalPart ::= Condition DO CodeList ELIF ConditionalPart 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("ConditionalPart",16, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-4)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ConditionalPart ::= Condition DO CodeList ELSE CodeList 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("ConditionalPart",16, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-4)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Conditional ::= IF ConditionalPart END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Conditional",15, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // GetCode ::= GET CodeList _PTO_PTO CodeList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("GetCode",14, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-4)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // GetCode ::= GET CodeList _PTO_PTO CodeList OR CodeList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("GetCode",14, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-6)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Code ::= ASPECTS NameList LISTEN CodeList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-4)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Code ::= IN CodeList WRITE CodeList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-4)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Code ::= _SLASH 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Code ::= GetCode 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Code ::= Conditional 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Code ::= Id _EQUAL Code 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Code ::= FALSE 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Code ::= TRUE 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Code ::= NUMBER_LITERAL 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Code ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Code ::= SUPER 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Code ::= Id 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Code ::= Code _PTO Id _QUERY 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-3)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Code ::= Code _PTO Id 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Code ::= SUPER FuncCallArgs 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Code ::= Id FuncCallArgs 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Code ::= Code _PTO Id FuncCallArgs 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-3)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Code ::= INDENT CodeList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Code ::= _MINUS 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Code ::= _MONEY 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Code ::= ForLoop 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Code ::= _LKEY CodeList _RKEY 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Code",13, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FormalArg ::= Id _EQUAL Code 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FormalArg",12, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FormalArg ::= Id 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FormalArg",12, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FuncFormalArgList ::= 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncFormalArgList",11, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FuncFormalArgList ::= FormalArg 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncFormalArgList",11, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FuncFormalArgList ::= FormalArg _COMMA FuncFormalArgList 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncFormalArgList",11, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FuncDecl ::= Id _EQUAL Code 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",10, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FuncDecl ::= FUN Id _LPAR FuncFormalArgList _RPAR RETURN Name 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",10, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-6)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FuncDecl ::= FUN Id _LPAR FuncFormalArgList _RPAR CodeList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("FuncDecl",10, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-6)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // AspectDecl ::= ON Name DO Id 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("AspectDecl",9, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-3)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // AliasDecl ::= Id _PTO Id AS Id 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("AliasDecl",8, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-4)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GeneratorMember ::= AspectDecl 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("GeneratorMember",7, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GeneratorMember ::= FuncDecl 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("GeneratorMember",7, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // GeneratorMember ::= AliasDecl 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("GeneratorMember",7, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GeneratorMemberList ::= 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("GeneratorMemberList",6, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GeneratorMemberList ::= GeneratorMember GeneratorMemberList 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("GeneratorMemberList",6, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Generator ::= GEN Id GeneratorMemberList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Generator",5, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-3)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Generator ::= GEN Id IS NameList GeneratorMemberList END 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Generator",5, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-5)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Import ::= IMPORT Name 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("Import",4, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // UnitElement ::= Import 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("UnitElement",3, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // UnitElement ::= Generator 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("UnitElement",3, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // UnitElementList ::= UnitElement 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("UnitElementList",2, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // UnitElementList ::= UnitElement UnitElementList 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("UnitElementList",2, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PackageDef ::= 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("PackageDef",1, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PackageDef ::= PACKAGE Name 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("PackageDef",1, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= CompileUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)).value;
		RESULT = start_val;
              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TextGeneratorGrammarCupParser$parser.done_parsing();
          return CUP$TextGeneratorGrammarCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // CompileUnit ::= PackageDef UnitElementList 
            {
              Object RESULT =null;

              CUP$TextGeneratorGrammarCupParser$result = parser.getSymbolFactory().newSymbol("CompileUnit",0, ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.elementAt(CUP$TextGeneratorGrammarCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$TextGeneratorGrammarCupParser$stack.peek()), RESULT);
            }
          return CUP$TextGeneratorGrammarCupParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

