
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 23 00:48:52 EDT 2008
//----------------------------------------------------

package org.cocuyo.dsl.lexer.syntax;


/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 23 00:48:52 EDT 2008
  */
public class LexerCupParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LexerCupParser() {super();}

  /** Constructor which sets the default scanner. */
  public LexerCupParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LexerCupParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\010\000\002\004\006\000\002\004\004" +
    "\000\002\005\005\000\002\006\011\000\002\006\007\000" +
    "\002\006\007\000\002\006\005\000\002\007\007\000\002" +
    "\007\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\005\000\002\011\003" +
    "\000\002\012\004\000\002\012\002\000\002\013\004\000" +
    "\002\013\002\000\002\014\004\000\002\014\002\000\002" +
    "\015\004\000\002\015\002\000\002\016\004\000\002\016" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\010\002\uffed\014\007\015\010\001\002\000" +
    "\006\002\uffed\014\007\001\002\000\004\002\070\001\002" +
    "\000\004\002\uffff\001\002\000\004\016\016\001\002\000" +
    "\004\016\012\001\002\000\006\002\uffed\014\007\001\002" +
    "\000\020\002\uffef\004\013\007\uffef\012\uffef\013\uffef\014" +
    "\uffef\016\uffef\001\002\000\004\016\012\001\002\000\016" +
    "\002\ufff0\007\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\001" +
    "\002\000\004\002\001\001\002\000\012\007\uffeb\012\017" +
    "\013\uffeb\016\uffeb\001\002\000\004\016\064\001\002\000" +
    "\012\007\uffeb\012\017\013\uffeb\016\uffeb\001\002\000\010" +
    "\007\uffe9\013\uffe9\016\022\001\002\000\004\010\061\001" +
    "\002\000\010\007\uffe9\013\uffe9\016\022\001\002\000\006" +
    "\007\026\013\uffe7\001\002\000\006\007\026\013\uffe7\001" +
    "\002\000\004\016\031\001\002\000\004\013\030\001\002" +
    "\000\006\002\ufffe\014\ufffe\001\002\000\012\005\033\006" +
    "\035\016\032\020\040\001\002\000\016\005\ufff2\006\ufff2" +
    "\007\ufff2\013\ufff2\016\ufff2\020\ufff2\001\002\000\004\016" +
    "\055\001\002\000\006\007\ufff7\013\ufff7\001\002\000\004" +
    "\016\050\001\002\000\012\007\uffe5\013\uffe5\016\032\020" +
    "\040\001\002\000\016\005\041\006\042\007\ufff3\013\ufff3" +
    "\016\ufff3\020\ufff3\001\002\000\016\005\ufff1\006\ufff1\007" +
    "\ufff1\013\ufff1\016\ufff1\020\ufff1\001\002\000\004\016\046" +
    "\001\002\000\004\016\043\001\002\000\014\005\044\007" +
    "\ufff5\013\ufff5\016\ufff5\020\ufff5\001\002\000\004\016\045" +
    "\001\002\000\012\007\ufff6\013\ufff6\016\ufff6\020\ufff6\001" +
    "\002\000\012\007\ufff4\013\ufff4\016\ufff4\020\ufff4\001\002" +
    "\000\006\007\uffe6\013\uffe6\001\002\000\010\005\051\016" +
    "\032\020\040\001\002\000\004\016\053\001\002\000\006" +
    "\007\ufff9\013\ufff9\001\002\000\006\016\032\020\040\001" +
    "\002\000\006\007\ufffa\013\ufffa\001\002\000\006\016\032" +
    "\020\040\001\002\000\006\007\ufff8\013\ufff8\001\002\000" +
    "\004\013\uffe8\001\002\000\006\007\uffea\013\uffea\001\002" +
    "\000\004\017\062\001\002\000\010\007\ufffb\013\ufffb\016" +
    "\ufffb\001\002\000\010\007\uffec\013\uffec\016\uffec\001\002" +
    "\000\016\004\013\007\uffef\011\066\012\uffef\013\uffef\016" +
    "\uffef\001\002\000\012\007\ufffc\012\ufffc\013\ufffc\016\ufffc" +
    "\001\002\000\004\016\012\001\002\000\012\007\ufffd\012" +
    "\ufffd\013\ufffd\016\ufffd\001\002\000\004\002\000\001\002" +
    "\000\004\002\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\010\002\004\003\003\012\005\001\001\000" +
    "\006\003\003\012\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\010\001\001\000" +
    "\006\003\003\012\014\001\001\000\002\001\001\000\004" +
    "\011\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\017\013\020\001\001\000\004\011\064\001\001" +
    "\000\006\004\017\013\062\001\001\000\006\005\022\014" +
    "\023\001\001\000\002\001\001\000\006\005\022\014\057" +
    "\001\001\000\006\006\024\015\026\001\001\000\006\006" +
    "\024\015\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\035\010\036\016\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\035\010\036\016\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\035\010\036\016\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\035\010\036\016\053\001\001" +
    "\000\002\001\001\000\010\007\035\010\036\016\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LexerCupParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LexerCupParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LexerCupParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LexerCupParser$actions {
  private final LexerCupParser parser;

  /** Constructor */
  CUP$LexerCupParser$actions(LexerCupParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LexerCupParser$do_action(
    int                        CUP$LexerCupParser$act_num,
    java_cup.runtime.lr_parser CUP$LexerCupParser$parser,
    java.util.Stack            CUP$LexerCupParser$stack,
    int                        CUP$LexerCupParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LexerCupParser$result;

      /* select the action based on the action number */
      switch (CUP$LexerCupParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TransitionList ::= Transition 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("TransitionList",12, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TransitionList ::= Transition TransitionList 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("TransitionList",12, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TransitionSetList ::= 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("TransitionSetList",11, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TransitionSetList ::= TransitionSet TransitionSetList 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("TransitionSetList",11, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RegexList ::= 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("RegexList",10, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RegexList ::= Regex RegexList 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("RegexList",10, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IncludeList ::= 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("IncludeList",9, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IncludeList ::= Include IncludeList 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("IncludeList",9, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LexerDefList ::= 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("LexerDefList",8, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LexerDefList ::= LexerDef LexerDefList 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("LexerDefList",8, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Name",7, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Name ::= ID LIT_9 Name 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Name",7, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Pattern ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Pattern",6, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Pattern ::= ID 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Pattern",6, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Transition ::= Pattern 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Transition",5, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Transition ::= Pattern LIT_8 ID 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Transition",5, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Transition ::= Pattern LIT_7 ID 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Transition",5, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Transition ::= Pattern LIT_7 ID LIT_8 ID 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Transition",5, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-4)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TransitionSet ::= LIT_6 ID TransitionList 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("TransitionSet",4, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TransitionSet ::= LIT_6 ID LIT_8 ID TransitionList 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("TransitionSet",4, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-4)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TransitionSet ::= LIT_6 ID LIT_7 ID TransitionList 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("TransitionSet",4, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-4)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TransitionSet ::= LIT_6 ID LIT_7 ID LIT_8 ID TransitionList 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("TransitionSet",4, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-6)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Regex ::= ID LIT_5 LINE 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Regex",3, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Include ::= LIT_3 Name 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Include",2, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Include ::= LIT_3 ID LIT_4 Name 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Include",2, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-3)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LexerDef ::= LIT_1 ID IncludeList RegexList TransitionSetList LIT_2 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("LexerDef",1, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-5)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Unit ::= LexerDefList 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Unit",0, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Unit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-1)).value;
		RESULT = start_val;
              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LexerCupParser$parser.done_parsing();
          return CUP$LexerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Unit ::= LIT_0 Name LexerDefList 
            {
              Object RESULT =null;

              CUP$LexerCupParser$result = parser.getSymbolFactory().newSymbol("Unit",0, ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.elementAt(CUP$LexerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$LexerCupParser$stack.peek()), RESULT);
            }
          return CUP$LexerCupParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

