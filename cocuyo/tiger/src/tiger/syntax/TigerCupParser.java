
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 07 23:38:59 CDT 2008
//----------------------------------------------------

package tiger.syntax;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 07 23:38:59 CDT 2008
  */
public class TigerCupParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TigerCupParser() {super();}

  /** Constructor which sets the default scanner. */
  public TigerCupParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TigerCupParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\004\005" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\003\000\002\007\005\000\002\007\006\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\005" +
    "\000\002\011\005\000\002\011\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\010\006\016\021\010\022\005\001\002\000" +
    "\034\002\ufff5\004\ufff5\005\ufff5\007\ufff5\010\040\011\041" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\001\002\000\034\002\uffec\004\uffec\005\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\001\002\000\004\002\047\001\002" +
    "\000\034\002\ufff0\004\ufff0\005\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\001\002\000\034\002\ufff1\004\ufff1\005\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\001\002\000\024\002\ufffb\004" +
    "\ufffb\005\ufffb\007\ufffb\014\032\015\033\016\ufffb\017\ufffb" +
    "\020\ufffb\001\002\000\030\002\ufff8\004\ufff8\005\ufff8\007" +
    "\ufff8\012\035\013\036\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\001\002\000\020\002\ufffd\004\ufffd\005\ufffd\007" +
    "\ufffd\016\030\017\ufffd\020\ufffd\001\002\000\016\002\uffff" +
    "\004\uffff\005\uffff\007\uffff\017\024\020\025\001\002\000" +
    "\034\002\ufff2\004\ufff2\005\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\001\002\000\010\006\016\021\010\022\005\001\002" +
    "\000\006\004\022\005\uffed\001\002\000\004\005\021\001" +
    "\002\000\034\002\uffef\004\uffef\005\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\001\002\000\010\006\016\021\010\022\005" +
    "\001\002\000\004\005\uffee\001\002\000\010\006\016\021" +
    "\010\022\005\001\002\000\010\006\016\021\010\022\005" +
    "\001\002\000\014\002\001\004\001\005\001\007\001\017" +
    "\024\001\002\000\020\002\ufffe\004\ufffe\005\ufffe\007\ufffe" +
    "\016\030\017\ufffe\020\ufffe\001\002\000\010\006\016\021" +
    "\010\022\005\001\002\000\024\002\ufffc\004\ufffc\005\ufffc" +
    "\007\ufffc\014\032\015\033\016\ufffc\017\ufffc\020\ufffc\001" +
    "\002\000\010\006\016\021\010\022\005\001\002\000\010" +
    "\006\016\021\010\022\005\001\002\000\030\002\ufffa\004" +
    "\ufffa\005\ufffa\007\ufffa\012\035\013\036\014\ufffa\015\ufffa" +
    "\016\ufffa\017\ufffa\020\ufffa\001\002\000\010\006\016\021" +
    "\010\022\005\001\002\000\010\006\016\021\010\022\005" +
    "\001\002\000\034\002\ufff7\004\ufff7\005\ufff7\007\ufff7\010" +
    "\040\011\041\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\001\002\000\010\006\016\021\010\022" +
    "\005\001\002\000\004\022\005\001\002\000\034\002\ufff4" +
    "\004\ufff4\005\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\001\002" +
    "\000\004\007\044\001\002\000\034\002\ufff3\004\ufff3\005" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\001\002\000\034\002" +
    "\ufff6\004\ufff6\005\ufff6\007\ufff6\010\040\011\041\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\001" +
    "\002\000\030\002\ufff9\004\ufff9\005\ufff9\007\ufff9\012\035" +
    "\013\036\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\001" +
    "\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\045\000\022\002\005\003\013\004\012\005\010\006" +
    "\011\007\003\010\014\012\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\016\003\013\004\012\005\010\006\011\007\003\010\014" +
    "\011\017\012\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\016\003\013\004\012" +
    "\005\010\006\011\007\003\010\014\011\022\012\006\001" +
    "\001\000\002\001\001\000\016\004\026\005\010\006\011" +
    "\007\003\010\014\012\006\001\001\000\020\003\025\004" +
    "\012\005\010\006\011\007\003\010\014\012\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\030\006" +
    "\011\007\003\010\014\012\006\001\001\000\002\001\001" +
    "\000\012\006\045\007\003\010\014\012\006\001\001\000" +
    "\012\006\033\007\003\010\014\012\006\001\001\000\002" +
    "\001\001\000\010\007\044\010\014\012\006\001\001\000" +
    "\010\007\036\010\014\012\006\001\001\000\002\001\001" +
    "\000\022\002\042\003\013\004\012\005\010\006\011\007" +
    "\003\010\014\012\006\001\001\000\004\012\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TigerCupParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TigerCupParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TigerCupParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TigerCupParser$actions {
  private final TigerCupParser parser;

  /** Constructor */
  CUP$TigerCupParser$actions(TigerCupParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TigerCupParser$do_action(
    int                        CUP$TigerCupParser$act_num,
    java_cup.runtime.lr_parser CUP$TigerCupParser$parser,
    java.util.Stack            CUP$TigerCupParser$stack,
    int                        CUP$TigerCupParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TigerCupParser$result;

      /* select the action based on the action number */
      switch (CUP$TigerCupParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Id ::= IDENT 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("Id",8, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ExprList ::= Expr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("ExprList",7, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ExprList ::= Expr LIT_12 ExprList 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("ExprList",7, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Value ::= LIT_10 ExprList LIT_11 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("Value",6, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Value ::= Id 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("Value",6, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Value ::= NUMBER 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("Value",6, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // AccesExpr ::= Value 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("AccesExpr",5, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // AccesExpr ::= AccesExpr LIT_8 Expr LIT_9 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("AccesExpr",5, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-3)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // AccesExpr ::= AccesExpr LIT_7 Id 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("AccesExpr",5, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MulExpr ::= AccesExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("MulExpr",4, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MulExpr ::= MulExpr LIT_6 AccesExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("MulExpr",4, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MulExpr ::= MulExpr LIT_5 AccesExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("MulExpr",4, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // AddExpr ::= MulExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("AddExpr",3, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AddExpr ::= AddExpr LIT_4 MulExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("AddExpr",3, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // AddExpr ::= AddExpr LIT_3 MulExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("AddExpr",3, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // AndExpr ::= AddExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("AndExpr",2, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // AndExpr ::= AndExpr LIT_2 AddExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("AndExpr",2, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OrExpr ::= AndExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("OrExpr",1, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OrExpr ::= OrExpr LIT_1 AndExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("OrExpr",1, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Expr ::= OrExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-1)).value;
		RESULT = start_val;
              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-1)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TigerCupParser$parser.done_parsing();
          return CUP$TigerCupParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Expr ::= OrExpr LIT_0 OrExpr 
            {
              Object RESULT =null;

              CUP$TigerCupParser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.elementAt(CUP$TigerCupParser$top-2)), ((java_cup.runtime.Symbol)CUP$TigerCupParser$stack.peek()), RESULT);
            }
          return CUP$TigerCupParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

