/* The following code was generated by JFlex 1.4.1 on 6/12/08 1:44 PM */

package org.cocuyo.dsl.grammar;

import java.io.Reader;

import org.cocuyo.parsing.cup.CupToken;

/* open-imports *//* close-imports */

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.1 on 6/12/08 1:44 PM from the specification file
 * <tt>CocuyoGrammar.jflex</tt>
 */
public class CocuyoGrammarJFlexLexer implements java_cup.runtime.Scanner
{

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP =
	{ 41, 41, 41, 41, 41, 41, 41, 41, 42, 4, 3, 0, 0, 2, 41, 41, 41, 41, 41,
			41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 1, 24, 26, 0, 40,
			0, 0, 27, 19, 20, 38, 37, 0, 33, 17, 0, 5, 25, 25, 25, 25, 25, 25,
			25, 25, 25, 30, 35, 0, 21, 34, 39, 18, 40, 40, 40, 40, 40, 40, 40,
			40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
			40, 40, 28, 0, 29, 0, 40, 43, 7, 40, 8, 32, 11, 40, 10, 40, 12, 40,
			9, 40, 13, 31, 14, 6, 40, 15, 40, 16, 40, 40, 40, 40, 40, 40, 22,
			36, 23, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
			41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41,
			41, 41, 0, 0, 40, 40, 40, 40, 0, 0, 0, 0, 40, 0, 0, 41, 0, 0, 0, 0,
			0, 0, 0, 40, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 40, 40, 40, 40, 40, 40,
			40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
			0, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
			40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 0, 40,
			40, 40, 40, 40, 40, 40, 40 };

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\1\0\1\1\2\2\1\3\5\4\1\5\1\6\1\7"
			+ "\1\10\1\11\1\12\1\13\1\14\1\15\2\1\1\16"
			+ "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"
			+ "\1\1\1\2\4\4\1\27\1\0\1\30\1\0\1\31"
			+ "\1\0\2\4\1\32\12\4\1\33\1\34\1\35";

	private static int[] zzUnpackAction()
	{
		int[] result = new int[58];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\54\0\130\0\204\0\54\0\260\0\334\0\u0108"
			+ "\0\u0134\0\u0160\0\54\0\54\0\54\0\54\0\u018c\0\54"
			+ "\0\54\0\54\0\u01b8\0\u01e4\0\u0210\0\54\0\54\0\54"
			+ "\0\u023c\0\54\0\54\0\54\0\54\0\54\0\u0268\0\54"
			+ "\0\u0294\0\u02c0\0\u02ec\0\u0318\0\54\0\u01e4\0\54\0\u0210"
			+ "\0\54\0\u0344\0\u0370\0\u039c\0\334\0\u03c8\0\54\0\u03f4"
			+ "\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc\0\u0528\0\334"
			+ "\0\334\0\334";

	private static int[] zzUnpackRowMap()
	{
		int[] result = new int[58];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\2\1\3\1\4\1\3\1\5\1\2\1\6\3\7"
			+ "\1\10\1\11\1\12\4\7\1\13\1\14\1\15\1\16"
			+ "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"
			+ "\1\27\1\30\2\7\1\31\1\2\1\32\1\33\1\34"
			+ "\1\35\1\36\1\7\1\2\1\3\1\37\55\0\1\3"
			+ "\1\0\1\3\46\0\1\3\4\0\1\40\55\0\2\7"
			+ "\1\41\11\7\10\0\1\7\5\0\2\7\7\0\3\7"
			+ "\6\0\14\7\10\0\1\7\5\0\2\7\7\0\3\7"
			+ "\6\0\12\7\1\42\1\7\10\0\1\7\5\0\2\7"
			+ "\7\0\3\7\6\0\14\7\10\0\1\7\5\0\1\43"
			+ "\1\7\7\0\3\7\6\0\10\7\1\44\3\7\10\0"
			+ "\1\7\5\0\2\7\7\0\3\7\43\0\1\45\16\0"
			+ "\1\23\23\0\1\23\22\0\32\46\1\47\21\46\33\50"
			+ "\1\47\20\50\42\0\1\51\17\0\13\52\16\0\2\52"
			+ "\7\0\1\52\10\0\3\7\1\53\10\7\10\0\1\7"
			+ "\5\0\2\7\7\0\3\7\6\0\2\7\1\54\11\7"
			+ "\10\0\1\7\5\0\2\7\7\0\3\7\6\0\14\7"
			+ "\10\0\1\7\5\0\1\7\1\55\7\0\3\7\6\0"
			+ "\1\7\1\56\12\7\10\0\1\7\5\0\2\7\7\0"
			+ "\3\7\6\0\14\52\10\0\1\52\5\0\2\52\7\0"
			+ "\3\52\1\57\5\0\4\7\1\60\7\7\10\0\1\7"
			+ "\5\0\2\7\7\0\3\7\6\0\10\7\1\61\3\7"
			+ "\10\0\1\7\5\0\2\7\7\0\3\7\6\0\11\7"
			+ "\1\62\2\7\10\0\1\7\5\0\2\7\7\0\3\7"
			+ "\6\0\2\7\1\63\11\7\10\0\1\7\5\0\2\7"
			+ "\7\0\3\7\6\0\10\7\1\64\3\7\10\0\1\7"
			+ "\5\0\2\7\7\0\3\7\6\0\12\7\1\65\1\7"
			+ "\10\0\1\7\5\0\2\7\7\0\3\7\6\0\5\7"
			+ "\1\66\6\7\10\0\1\7\5\0\2\7\7\0\3\7"
			+ "\6\0\2\7\1\67\11\7\10\0\1\7\5\0\2\7"
			+ "\7\0\3\7\6\0\13\7\1\70\10\0\1\7\5\0"
			+ "\2\7\7\0\3\7\6\0\6\7\1\71\5\7\10\0"
			+ "\1\7\5\0\2\7\7\0\3\7\6\0\12\7\1\72"
			+ "\1\7\10\0\1\7\5\0\2\7\7\0\3\7\1\0";

	private static int[] zzUnpackTrans()
	{
		int[] result = new int[1364];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] =
	{ "Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\0\1\11\2\1\1\11\5\1\4\11\1\1\3\11"
			+ "\3\1\3\11\1\1\5\11\1\1\1\11\4\1\1\11"
			+ "\1\0\1\11\1\0\1\11\1\0\4\1\1\11\13\1";

	private static int[] zzUnpackAttribute()
	{
		int[] result = new int[58];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result)
	{
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l)
		{
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the textposition at the last state to be included in yytext */
	private int zzPushbackPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	public boolean isAtEOF()
	{
		return zzEOFDone;
	}

	/* open-other-methods *//* close-other-methods */

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Reader to read input from.
	 */
	public CocuyoGrammarJFlexLexer(java.io.Reader in)
	{
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 * 
	 * @param in
	 *            the java.io.Inputstream to read input from.
	 */
	public CocuyoGrammarJFlexLexer(java.io.InputStream in)
	{
		this(new java.io.InputStreamReader(in));
	}

	public void reset(Reader r, int line, int pos, int column)
	{
		yyline = line;
		yychar = pos;
		yycolumn = column;
	}

	/**
	 * Refills the input buffer.
	 * 
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException
	{

		/* first: make room (if you can) */
		if (zzStartRead > 0)
		{
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead
					- zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzPushbackPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length)
		{
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length
				- zzEndRead);

		if (numRead < 0)
		{
			return true;
		} else
		{
			zzEndRead += numRead;
			return false;
		}
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException
	{
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the
	 * old reader.
	 * 
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 * 
	 * @param reader
	 *            the new input stream
	 */
	public final void yyreset(java.io.Reader reader)
	{
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate()
	{
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 * 
	 * @param newState
	 *            the new lexical state
	 */
	public final void yybegin(int newState)
	{
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext()
	{
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 * 
	 * @param pos
	 *            the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 * 
	 * @return the character at position pos
	 */
	public final char yycharat(int pos)
	{
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength()
	{
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 * 
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and
	 * a match-all fallback rule) this method will only be called with things
	 * that "Can't Possibly Happen". If this method is called, something is
	 * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 * 
	 * Usual syntax/scanner level error handling should be done in error
	 * fallback rules.
	 * 
	 * @param errorCode
	 *            the code of the errormessage to display
	 */
	private void zzScanError(int errorCode)
	{
		String message;
		try
		{
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e)
		{
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 * 
	 * They will be read again by then next call of the scanning method
	 * 
	 * @param number
	 *            the number of characters to be read again. This number must
	 *            not be greater than yylength()!
	 */
	public void yypushback(int number)
	{
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end
	 * of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException
	{
		if (!zzEOFDone)
		{
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 * 
	 * @return the next token
	 * @exception java.io.IOException
	 *                if any I/O-Error occurs
	 */
	public CupToken next_token() throws java.io.IOException
	{
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true)
		{
			zzMarkedPosL = zzMarkedPos;

			yychar += zzMarkedPosL - zzStartRead;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++)
			{
				switch (zzBufferL[zzCurrentPosL])
				{
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else
					{
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn++;
				}
			}

			if (zzR)
			{
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else
				{
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = zzLexicalState;

			zzForAction:
			{
				while (true)
				{

					if (zzCurrentPosL < zzEndReadL)
						zzInput = zzBufferL[zzCurrentPosL++];
					else if (zzAtEOF)
					{
						zzInput = YYEOF;
						break zzForAction;
					} else
					{
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof)
						{
							zzInput = YYEOF;
							break zzForAction;
						} else
						{
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1)
					{
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction])
			{
			case 4:
			{
				return new CupToken(CocuyoGrammarSymbol.ID, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 30:
				break;
			case 26:
			{
				return new CupToken(CocuyoGrammarSymbol.END, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 31:
				break;
			case 24:
			{
				return new CupToken(CocuyoGrammarSymbol.STRING_LITERAL,
						yytext(), "", yyline, yycolumn, 0);
			}
			case 32:
				break;
			case 19:
			{
				return new CupToken(CocuyoGrammarSymbol._OR, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 33:
				break;
			case 8:
			{
				return new CupToken(CocuyoGrammarSymbol._RPAR, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 34:
				break;
			case 11:
			{
				return new CupToken(CocuyoGrammarSymbol._RKEY, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 35:
				break;
			case 22:
			{
				return new CupToken(CocuyoGrammarSymbol._QUERY, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 36:
				break;
			case 17:
			{
				return new CupToken(CocuyoGrammarSymbol._MINUS, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 37:
				break;
			case 16:
			{
				return new CupToken(CocuyoGrammarSymbol._DPTO, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 38:
				break;
			case 27:
			{
				return new CupToken(CocuyoGrammarSymbol.IMPORT, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 39:
				break;
			case 1:
			{
				CupToken _token = new CupToken(-1, yytext(), "", yyline,
						yycolumn, yychar);
				_token.isBadToken(true);
				return _token;
			}
			case 40:
				break;
			case 9:
			{
				return new CupToken(CocuyoGrammarSymbol._EQUAL, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 41:
				break;
			case 21:
			{
				return new CupToken(CocuyoGrammarSymbol._MUL, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 42:
				break;
			case 25:
			{
				return new CupToken(CocuyoGrammarSymbol._MINUS_RANG, yytext(),
						"", yyline, yycolumn, 0);
			}
			case 43:
				break;
			case 28:
			{
				return new CupToken(CocuyoGrammarSymbol.PACKAGE, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 44:
				break;
			case 20:
			{
				return new CupToken(CocuyoGrammarSymbol._ADD, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 45:
				break;
			case 6:
			{
				return new CupToken(CocuyoGrammarSymbol._AT, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 46:
				break;
			case 14:
			{
				return new CupToken(CocuyoGrammarSymbol._LCOR, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 47:
				break;
			case 29:
			{
				return new CupToken(CocuyoGrammarSymbol.GRAMMAR, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 48:
				break;
			case 12:
			{
				return new CupToken(CocuyoGrammarSymbol._EXCLAM, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 49:
				break;
			case 7:
			{
				return new CupToken(CocuyoGrammarSymbol._LPAR, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 50:
				break;
			case 10:
			{
				return new CupToken(CocuyoGrammarSymbol._LKEY, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 51:
				break;
			case 18:
			{
				return new CupToken(CocuyoGrammarSymbol._PTOCOMMA, yytext(),
						"", yyline, yycolumn, 0);
			}
			case 52:
				break;
			case 13:
			{
				return new CupToken(CocuyoGrammarSymbol.NUMBER_LITERAL,
						yytext(), "", yyline, yycolumn, 0);
			}
			case 53:
				break;
			case 3:
			{
				yycolumn = yycolumn - yycolumn % 4 + 3;
			}
			case 54:
				break;
			case 5:
			{
				return new CupToken(CocuyoGrammarSymbol._PTO, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 55:
				break;
			case 15:
			{
				return new CupToken(CocuyoGrammarSymbol._RCOR, yytext(), "",
						yyline, yycolumn, 0);
			}
			case 56:
				break;
			case 23:
			{
				return new CupToken(CocuyoGrammarSymbol._EQUAL_RANG, yytext(),
						"", yyline, yycolumn, 0);
			}
			case 57:
				break;
			case 2:
			{
			}
			case 58:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos)
				{
					zzAtEOF = true;
					zzDoEOF();
					{
						return new CupToken(CocuyoGrammarSymbol.EOF, yytext(),
								"", yyline, yycolumn, 0, true);
					}
				} else
				{
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
