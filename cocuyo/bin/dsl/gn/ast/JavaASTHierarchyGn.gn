package dsl.gn.ast

import dsl.gn.ebnf
import dsl.gn.ool

gen JavaASTHierarchyGn is JavaGn
	
	abstract_ast_gen = JavaAbstractASTGn
	list_ast_gen = JavaListASTGn
	trivial_ast_gen = JavaTrivialASTGn
	
	fun hierarchy(_hierarchy)		
		for _type in _hierarchy do
			type(_type) $
		end	
		JavaListASTGn.default(_hierarchy)
		ast_types_root(_hierarchy)								
	end		
	
	fun ast_types_root(_hierarchy)
	
		_root = ASTGn.ast_type_name("Root")
	
		JavaTypeGn.file("I" _root, _hierarchy.base_path):
			"package " _hierarchy.ast_package_name ";" $
			get "//code-open" $ .. $ "//code-close"  or				
				>import org.cocuyo.parsing.*;			
				"public interface I" _root " extends IAST" 
				block: end				
			end
		end
		
		JavaTypeGn.file(_root, _hierarchy.base_path):
			"package " _hierarchy.ast_package_name ";" $
			get "//code-open" $ .. $ "//code-close"  or
				>import org.cocuyo.parsing.*;			
				"public class " _root " extends AST" 
				block: end				
			end
		end
				
	end
	
	fun type(_type)
		if not _type.is_fool? do			
			if _type.is_abstract? do
				abstract_ast_gen.type(_type)
			elif _type.is_list? do
				list_ast_gen.type(_type)
			else
				trivial_ast_gen.type(_type)
			end
		end
	end
	
end
